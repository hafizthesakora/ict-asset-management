// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String?
  items Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unit {
   id String @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  abbreviation  String
  items Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  items Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Warehouse {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  location      String?
  description   String?
  warehouseType String
  stockQty      Int @default(0)
  items Item[]
  addWarehouseAdjustments AddWarehouseAdjustment[]
  transferWarehouseAdjustments TransferWarehouseAdjustment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model People {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  topology      String?
  department   String?
  aow String?
  stockQty      Int @default(0)
  addStockAdjustments AddStockAdjustment[]
  transferStockAdjustments TransferStockAdjustment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber        String
  quantity      Int?
  products   String?
  notes   String?
  supplier         Supplier     @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId       String @db.ObjectId
  status       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model AddStockAdjustment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber     String?
  addStockQty      Int
  notes   String?
  receivingWarehouseId String 
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String @db.ObjectId
  people People @relation(fields: [peopleId], references: [id], onDelete: Cascade)
  peopleId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransferStockAdjustment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber     String?
  transferStockQty      Int
  notes   String?
  givingWarehouseId String 
  receivingWarehouseId String?
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String @db.ObjectId
  people People @relation(fields: [peopleId], references: [id], onDelete: Cascade)
  peopleId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AddWarehouseAdjustment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber     String?
  addStockQty      Int
  notes   String?
  receivingWarehouseId String 
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String @db.ObjectId
  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransferWarehouseAdjustment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber     String?
  transferStockQty      Int
  notes   String?
  givingWarehouseId String 
  receivingWarehouseId String?
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String @db.ObjectId
  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Item {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description   String?
  category      Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String @db.ObjectId
  serialNumber           String    @unique
  barcode       String?
  quantity      Int?
  year          Int?
  unit          Unit      @relation(fields: [unitId], references: [id])
  unitId        String @db.ObjectId
  brand         Brand     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId       String @db.ObjectId
  assetTag     String?
  buyingPrice     Float?
  supplier         Supplier     @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId       String @db.ObjectId
  warehouse         Warehouse     @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseId       String @db.ObjectId
  documentNumber  String?
  imageUrl        String?
  callOff        String?
  model    String?
  eniShare       Float?
  notes         String?
  addStockAdjustments AddStockAdjustment[]
  transferStockAdjustments TransferStockAdjustment[]
  addWarehouseAdjustments AddWarehouseAdjustment[]
  transferWarehouseAdjustments TransferWarehouseAdjustment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  phone           String?
  email           String?
  address         String?
  contactPerson   String?
  supplierCode    String    @unique
  paymentTerms    String?
  taxID           String?
  notes           String?
  items Item[]
  purchases Purchase[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}